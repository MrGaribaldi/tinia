// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TiniaProtoBuf.proto

#ifndef PROTOBUF_TiniaProtoBuf_2eproto__INCLUDED
#define PROTOBUF_TiniaProtoBuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tinia {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TiniaProtoBuf_2eproto();
void protobuf_AssignDesc_TiniaProtoBuf_2eproto();
void protobuf_ShutdownFile_TiniaProtoBuf_2eproto();

class TiniaProtoBuf;
class TiniaProtoBuf_Viewer;

// ===================================================================

class TiniaProtoBuf_Viewer : public ::google::protobuf::Message {
 public:
  TiniaProtoBuf_Viewer();
  virtual ~TiniaProtoBuf_Viewer();

  TiniaProtoBuf_Viewer(const TiniaProtoBuf_Viewer& from);

  inline TiniaProtoBuf_Viewer& operator=(const TiniaProtoBuf_Viewer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TiniaProtoBuf_Viewer& default_instance();

  void Swap(TiniaProtoBuf_Viewer* other);

  // implements Message ----------------------------------------------

  TiniaProtoBuf_Viewer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TiniaProtoBuf_Viewer& from);
  void MergeFrom(const TiniaProtoBuf_Viewer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string viewer_key = 1;
  inline bool has_viewer_key() const;
  inline void clear_viewer_key();
  static const int kViewerKeyFieldNumber = 1;
  inline const ::std::string& viewer_key() const;
  inline void set_viewer_key(const ::std::string& value);
  inline void set_viewer_key(const char* value);
  inline void set_viewer_key(const char* value, size_t size);
  inline ::std::string* mutable_viewer_key();
  inline ::std::string* release_viewer_key();
  inline void set_allocated_viewer_key(::std::string* viewer_key);

  // required bytes rgb = 2;
  inline bool has_rgb() const;
  inline void clear_rgb();
  static const int kRgbFieldNumber = 2;
  inline const ::std::string& rgb() const;
  inline void set_rgb(const ::std::string& value);
  inline void set_rgb(const char* value);
  inline void set_rgb(const void* value, size_t size);
  inline ::std::string* mutable_rgb();
  inline ::std::string* release_rgb();
  inline void set_allocated_rgb(::std::string* rgb);

  // optional bytes depth = 3;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 3;
  inline const ::std::string& depth() const;
  inline void set_depth(const ::std::string& value);
  inline void set_depth(const char* value);
  inline void set_depth(const void* value, size_t size);
  inline ::std::string* mutable_depth();
  inline ::std::string* release_depth();
  inline void set_allocated_depth(::std::string* depth);

  // optional string view = 4;
  inline bool has_view() const;
  inline void clear_view();
  static const int kViewFieldNumber = 4;
  inline const ::std::string& view() const;
  inline void set_view(const ::std::string& value);
  inline void set_view(const char* value);
  inline void set_view(const char* value, size_t size);
  inline ::std::string* mutable_view();
  inline ::std::string* release_view();
  inline void set_allocated_view(::std::string* view);

  // optional string proj = 5;
  inline bool has_proj() const;
  inline void clear_proj();
  static const int kProjFieldNumber = 5;
  inline const ::std::string& proj() const;
  inline void set_proj(const ::std::string& value);
  inline void set_proj(const char* value);
  inline void set_proj(const char* value, size_t size);
  inline ::std::string* mutable_proj();
  inline ::std::string* release_proj();
  inline void set_allocated_proj(::std::string* proj);

  // @@protoc_insertion_point(class_scope:tinia.protobuf.TiniaProtoBuf.Viewer)
 private:
  inline void set_has_viewer_key();
  inline void clear_has_viewer_key();
  inline void set_has_rgb();
  inline void clear_has_rgb();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_view();
  inline void clear_has_view();
  inline void set_has_proj();
  inline void clear_has_proj();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* viewer_key_;
  ::std::string* rgb_;
  ::std::string* depth_;
  ::std::string* view_;
  ::std::string* proj_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TiniaProtoBuf_2eproto();
  friend void protobuf_AssignDesc_TiniaProtoBuf_2eproto();
  friend void protobuf_ShutdownFile_TiniaProtoBuf_2eproto();

  void InitAsDefaultInstance();
  static TiniaProtoBuf_Viewer* default_instance_;
};
// -------------------------------------------------------------------

class TiniaProtoBuf : public ::google::protobuf::Message {
 public:
  TiniaProtoBuf();
  virtual ~TiniaProtoBuf();

  TiniaProtoBuf(const TiniaProtoBuf& from);

  inline TiniaProtoBuf& operator=(const TiniaProtoBuf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TiniaProtoBuf& default_instance();

  void Swap(TiniaProtoBuf* other);

  // implements Message ----------------------------------------------

  TiniaProtoBuf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TiniaProtoBuf& from);
  void MergeFrom(const TiniaProtoBuf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TiniaProtoBuf_Viewer Viewer;

  // accessors -------------------------------------------------------

  // repeated group Viewer = 1 {
  inline int viewer_size() const;
  inline void clear_viewer();
  static const int kViewerFieldNumber = 1;
  inline const ::tinia::protobuf::TiniaProtoBuf_Viewer& viewer(int index) const;
  inline ::tinia::protobuf::TiniaProtoBuf_Viewer* mutable_viewer(int index);
  inline ::tinia::protobuf::TiniaProtoBuf_Viewer* add_viewer();
  inline const ::google::protobuf::RepeatedPtrField< ::tinia::protobuf::TiniaProtoBuf_Viewer >&
      viewer() const;
  inline ::google::protobuf::RepeatedPtrField< ::tinia::protobuf::TiniaProtoBuf_Viewer >*
      mutable_viewer();

  // @@protoc_insertion_point(class_scope:tinia.protobuf.TiniaProtoBuf)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::tinia::protobuf::TiniaProtoBuf_Viewer > viewer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TiniaProtoBuf_2eproto();
  friend void protobuf_AssignDesc_TiniaProtoBuf_2eproto();
  friend void protobuf_ShutdownFile_TiniaProtoBuf_2eproto();

  void InitAsDefaultInstance();
  static TiniaProtoBuf* default_instance_;
};
// ===================================================================


// ===================================================================

// TiniaProtoBuf_Viewer

// required string viewer_key = 1;
inline bool TiniaProtoBuf_Viewer::has_viewer_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TiniaProtoBuf_Viewer::set_has_viewer_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TiniaProtoBuf_Viewer::clear_has_viewer_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TiniaProtoBuf_Viewer::clear_viewer_key() {
  if (viewer_key_ != &::google::protobuf::internal::kEmptyString) {
    viewer_key_->clear();
  }
  clear_has_viewer_key();
}
inline const ::std::string& TiniaProtoBuf_Viewer::viewer_key() const {
  return *viewer_key_;
}
inline void TiniaProtoBuf_Viewer::set_viewer_key(const ::std::string& value) {
  set_has_viewer_key();
  if (viewer_key_ == &::google::protobuf::internal::kEmptyString) {
    viewer_key_ = new ::std::string;
  }
  viewer_key_->assign(value);
}
inline void TiniaProtoBuf_Viewer::set_viewer_key(const char* value) {
  set_has_viewer_key();
  if (viewer_key_ == &::google::protobuf::internal::kEmptyString) {
    viewer_key_ = new ::std::string;
  }
  viewer_key_->assign(value);
}
inline void TiniaProtoBuf_Viewer::set_viewer_key(const char* value, size_t size) {
  set_has_viewer_key();
  if (viewer_key_ == &::google::protobuf::internal::kEmptyString) {
    viewer_key_ = new ::std::string;
  }
  viewer_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TiniaProtoBuf_Viewer::mutable_viewer_key() {
  set_has_viewer_key();
  if (viewer_key_ == &::google::protobuf::internal::kEmptyString) {
    viewer_key_ = new ::std::string;
  }
  return viewer_key_;
}
inline ::std::string* TiniaProtoBuf_Viewer::release_viewer_key() {
  clear_has_viewer_key();
  if (viewer_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = viewer_key_;
    viewer_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TiniaProtoBuf_Viewer::set_allocated_viewer_key(::std::string* viewer_key) {
  if (viewer_key_ != &::google::protobuf::internal::kEmptyString) {
    delete viewer_key_;
  }
  if (viewer_key) {
    set_has_viewer_key();
    viewer_key_ = viewer_key;
  } else {
    clear_has_viewer_key();
    viewer_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes rgb = 2;
inline bool TiniaProtoBuf_Viewer::has_rgb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TiniaProtoBuf_Viewer::set_has_rgb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TiniaProtoBuf_Viewer::clear_has_rgb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TiniaProtoBuf_Viewer::clear_rgb() {
  if (rgb_ != &::google::protobuf::internal::kEmptyString) {
    rgb_->clear();
  }
  clear_has_rgb();
}
inline const ::std::string& TiniaProtoBuf_Viewer::rgb() const {
  return *rgb_;
}
inline void TiniaProtoBuf_Viewer::set_rgb(const ::std::string& value) {
  set_has_rgb();
  if (rgb_ == &::google::protobuf::internal::kEmptyString) {
    rgb_ = new ::std::string;
  }
  rgb_->assign(value);
}
inline void TiniaProtoBuf_Viewer::set_rgb(const char* value) {
  set_has_rgb();
  if (rgb_ == &::google::protobuf::internal::kEmptyString) {
    rgb_ = new ::std::string;
  }
  rgb_->assign(value);
}
inline void TiniaProtoBuf_Viewer::set_rgb(const void* value, size_t size) {
  set_has_rgb();
  if (rgb_ == &::google::protobuf::internal::kEmptyString) {
    rgb_ = new ::std::string;
  }
  rgb_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TiniaProtoBuf_Viewer::mutable_rgb() {
  set_has_rgb();
  if (rgb_ == &::google::protobuf::internal::kEmptyString) {
    rgb_ = new ::std::string;
  }
  return rgb_;
}
inline ::std::string* TiniaProtoBuf_Viewer::release_rgb() {
  clear_has_rgb();
  if (rgb_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rgb_;
    rgb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TiniaProtoBuf_Viewer::set_allocated_rgb(::std::string* rgb) {
  if (rgb_ != &::google::protobuf::internal::kEmptyString) {
    delete rgb_;
  }
  if (rgb) {
    set_has_rgb();
    rgb_ = rgb;
  } else {
    clear_has_rgb();
    rgb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes depth = 3;
inline bool TiniaProtoBuf_Viewer::has_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TiniaProtoBuf_Viewer::set_has_depth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TiniaProtoBuf_Viewer::clear_has_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TiniaProtoBuf_Viewer::clear_depth() {
  if (depth_ != &::google::protobuf::internal::kEmptyString) {
    depth_->clear();
  }
  clear_has_depth();
}
inline const ::std::string& TiniaProtoBuf_Viewer::depth() const {
  return *depth_;
}
inline void TiniaProtoBuf_Viewer::set_depth(const ::std::string& value) {
  set_has_depth();
  if (depth_ == &::google::protobuf::internal::kEmptyString) {
    depth_ = new ::std::string;
  }
  depth_->assign(value);
}
inline void TiniaProtoBuf_Viewer::set_depth(const char* value) {
  set_has_depth();
  if (depth_ == &::google::protobuf::internal::kEmptyString) {
    depth_ = new ::std::string;
  }
  depth_->assign(value);
}
inline void TiniaProtoBuf_Viewer::set_depth(const void* value, size_t size) {
  set_has_depth();
  if (depth_ == &::google::protobuf::internal::kEmptyString) {
    depth_ = new ::std::string;
  }
  depth_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TiniaProtoBuf_Viewer::mutable_depth() {
  set_has_depth();
  if (depth_ == &::google::protobuf::internal::kEmptyString) {
    depth_ = new ::std::string;
  }
  return depth_;
}
inline ::std::string* TiniaProtoBuf_Viewer::release_depth() {
  clear_has_depth();
  if (depth_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = depth_;
    depth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TiniaProtoBuf_Viewer::set_allocated_depth(::std::string* depth) {
  if (depth_ != &::google::protobuf::internal::kEmptyString) {
    delete depth_;
  }
  if (depth) {
    set_has_depth();
    depth_ = depth;
  } else {
    clear_has_depth();
    depth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string view = 4;
inline bool TiniaProtoBuf_Viewer::has_view() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TiniaProtoBuf_Viewer::set_has_view() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TiniaProtoBuf_Viewer::clear_has_view() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TiniaProtoBuf_Viewer::clear_view() {
  if (view_ != &::google::protobuf::internal::kEmptyString) {
    view_->clear();
  }
  clear_has_view();
}
inline const ::std::string& TiniaProtoBuf_Viewer::view() const {
  return *view_;
}
inline void TiniaProtoBuf_Viewer::set_view(const ::std::string& value) {
  set_has_view();
  if (view_ == &::google::protobuf::internal::kEmptyString) {
    view_ = new ::std::string;
  }
  view_->assign(value);
}
inline void TiniaProtoBuf_Viewer::set_view(const char* value) {
  set_has_view();
  if (view_ == &::google::protobuf::internal::kEmptyString) {
    view_ = new ::std::string;
  }
  view_->assign(value);
}
inline void TiniaProtoBuf_Viewer::set_view(const char* value, size_t size) {
  set_has_view();
  if (view_ == &::google::protobuf::internal::kEmptyString) {
    view_ = new ::std::string;
  }
  view_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TiniaProtoBuf_Viewer::mutable_view() {
  set_has_view();
  if (view_ == &::google::protobuf::internal::kEmptyString) {
    view_ = new ::std::string;
  }
  return view_;
}
inline ::std::string* TiniaProtoBuf_Viewer::release_view() {
  clear_has_view();
  if (view_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = view_;
    view_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TiniaProtoBuf_Viewer::set_allocated_view(::std::string* view) {
  if (view_ != &::google::protobuf::internal::kEmptyString) {
    delete view_;
  }
  if (view) {
    set_has_view();
    view_ = view;
  } else {
    clear_has_view();
    view_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string proj = 5;
inline bool TiniaProtoBuf_Viewer::has_proj() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TiniaProtoBuf_Viewer::set_has_proj() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TiniaProtoBuf_Viewer::clear_has_proj() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TiniaProtoBuf_Viewer::clear_proj() {
  if (proj_ != &::google::protobuf::internal::kEmptyString) {
    proj_->clear();
  }
  clear_has_proj();
}
inline const ::std::string& TiniaProtoBuf_Viewer::proj() const {
  return *proj_;
}
inline void TiniaProtoBuf_Viewer::set_proj(const ::std::string& value) {
  set_has_proj();
  if (proj_ == &::google::protobuf::internal::kEmptyString) {
    proj_ = new ::std::string;
  }
  proj_->assign(value);
}
inline void TiniaProtoBuf_Viewer::set_proj(const char* value) {
  set_has_proj();
  if (proj_ == &::google::protobuf::internal::kEmptyString) {
    proj_ = new ::std::string;
  }
  proj_->assign(value);
}
inline void TiniaProtoBuf_Viewer::set_proj(const char* value, size_t size) {
  set_has_proj();
  if (proj_ == &::google::protobuf::internal::kEmptyString) {
    proj_ = new ::std::string;
  }
  proj_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TiniaProtoBuf_Viewer::mutable_proj() {
  set_has_proj();
  if (proj_ == &::google::protobuf::internal::kEmptyString) {
    proj_ = new ::std::string;
  }
  return proj_;
}
inline ::std::string* TiniaProtoBuf_Viewer::release_proj() {
  clear_has_proj();
  if (proj_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = proj_;
    proj_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TiniaProtoBuf_Viewer::set_allocated_proj(::std::string* proj) {
  if (proj_ != &::google::protobuf::internal::kEmptyString) {
    delete proj_;
  }
  if (proj) {
    set_has_proj();
    proj_ = proj;
  } else {
    clear_has_proj();
    proj_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TiniaProtoBuf

// repeated group Viewer = 1 {
inline int TiniaProtoBuf::viewer_size() const {
  return viewer_.size();
}
inline void TiniaProtoBuf::clear_viewer() {
  viewer_.Clear();
}
inline const ::tinia::protobuf::TiniaProtoBuf_Viewer& TiniaProtoBuf::viewer(int index) const {
  return viewer_.Get(index);
}
inline ::tinia::protobuf::TiniaProtoBuf_Viewer* TiniaProtoBuf::mutable_viewer(int index) {
  return viewer_.Mutable(index);
}
inline ::tinia::protobuf::TiniaProtoBuf_Viewer* TiniaProtoBuf::add_viewer() {
  return viewer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tinia::protobuf::TiniaProtoBuf_Viewer >&
TiniaProtoBuf::viewer() const {
  return viewer_;
}
inline ::google::protobuf::RepeatedPtrField< ::tinia::protobuf::TiniaProtoBuf_Viewer >*
TiniaProtoBuf::mutable_viewer() {
  return &viewer_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace tinia

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TiniaProtoBuf_2eproto__INCLUDED
