// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FRVProtoBuffers.proto

#ifndef PROTOBUF_FRVProtoBuffers_2eproto__INCLUDED
#define PROTOBUF_FRVProtoBuffers_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace frv {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FRVProtoBuffers_2eproto();
void protobuf_AssignDesc_FRVProtoBuffers_2eproto();
void protobuf_ShutdownFile_FRVProtoBuffers_2eproto();

class imageRequest;
class imageResponse;

// ===================================================================

class imageRequest : public ::google::protobuf::Message {
 public:
  imageRequest();
  virtual ~imageRequest();

  imageRequest(const imageRequest& from);

  inline imageRequest& operator=(const imageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const imageRequest& default_instance();

  void Swap(imageRequest* other);

  // implements Message ----------------------------------------------

  imageRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const imageRequest& from);
  void MergeFrom(const imageRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float modelView = 1 [packed = true];
  inline int modelview_size() const;
  inline void clear_modelview();
  static const int kModelViewFieldNumber = 1;
  inline float modelview(int index) const;
  inline void set_modelview(int index, float value);
  inline void add_modelview(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      modelview() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_modelview();

  // repeated float projection = 2 [packed = true];
  inline int projection_size() const;
  inline void clear_projection();
  static const int kProjectionFieldNumber = 2;
  inline float projection(int index) const;
  inline void set_projection(int index, float value);
  inline void add_projection(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      projection() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_projection();

  // optional float zScale = 3;
  inline bool has_zscale() const;
  inline void clear_zscale();
  static const int kZScaleFieldNumber = 3;
  inline float zscale() const;
  inline void set_zscale(float value);

  // @@protoc_insertion_point(class_scope:frv.imageRequest)
 private:
  inline void set_has_zscale();
  inline void clear_has_zscale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > modelview_;
  mutable int _modelview_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > projection_;
  mutable int _projection_cached_byte_size_;
  float zscale_;
  friend void  protobuf_AddDesc_FRVProtoBuffers_2eproto();
  friend void protobuf_AssignDesc_FRVProtoBuffers_2eproto();
  friend void protobuf_ShutdownFile_FRVProtoBuffers_2eproto();

  void InitAsDefaultInstance();
  static imageRequest* default_instance_;
};
// -------------------------------------------------------------------

class imageResponse : public ::google::protobuf::Message {
 public:
  imageResponse();
  virtual ~imageResponse();

  imageResponse(const imageResponse& from);

  inline imageResponse& operator=(const imageResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const imageResponse& default_instance();

  void Swap(imageResponse* other);

  // implements Message ----------------------------------------------

  imageResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const imageResponse& from);
  void MergeFrom(const imageResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes image_bytes = 1;
  inline bool has_image_bytes() const;
  inline void clear_image_bytes();
  static const int kImageBytesFieldNumber = 1;
  inline const ::std::string& image_bytes() const;
  inline void set_image_bytes(const ::std::string& value);
  inline void set_image_bytes(const char* value);
  inline void set_image_bytes(const void* value, size_t size);
  inline ::std::string* mutable_image_bytes();
  inline ::std::string* release_image_bytes();
  inline void set_allocated_image_bytes(::std::string* image_bytes);

  // required string image_type = 2;
  inline bool has_image_type() const;
  inline void clear_image_type();
  static const int kImageTypeFieldNumber = 2;
  inline const ::std::string& image_type() const;
  inline void set_image_type(const ::std::string& value);
  inline void set_image_type(const char* value);
  inline void set_image_type(const char* value, size_t size);
  inline ::std::string* mutable_image_type();
  inline ::std::string* release_image_type();
  inline void set_allocated_image_type(::std::string* image_type);

  // optional float zScale = 3;
  inline bool has_zscale() const;
  inline void clear_zscale();
  static const int kZScaleFieldNumber = 3;
  inline float zscale() const;
  inline void set_zscale(float value);

  // @@protoc_insertion_point(class_scope:frv.imageResponse)
 private:
  inline void set_has_image_bytes();
  inline void clear_has_image_bytes();
  inline void set_has_image_type();
  inline void clear_has_image_type();
  inline void set_has_zscale();
  inline void clear_has_zscale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* image_bytes_;
  ::std::string* image_type_;
  float zscale_;
  friend void  protobuf_AddDesc_FRVProtoBuffers_2eproto();
  friend void protobuf_AssignDesc_FRVProtoBuffers_2eproto();
  friend void protobuf_ShutdownFile_FRVProtoBuffers_2eproto();

  void InitAsDefaultInstance();
  static imageResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// imageRequest

// repeated float modelView = 1 [packed = true];
inline int imageRequest::modelview_size() const {
  return modelview_.size();
}
inline void imageRequest::clear_modelview() {
  modelview_.Clear();
}
inline float imageRequest::modelview(int index) const {
  // @@protoc_insertion_point(field_get:frv.imageRequest.modelView)
  return modelview_.Get(index);
}
inline void imageRequest::set_modelview(int index, float value) {
  modelview_.Set(index, value);
  // @@protoc_insertion_point(field_set:frv.imageRequest.modelView)
}
inline void imageRequest::add_modelview(float value) {
  modelview_.Add(value);
  // @@protoc_insertion_point(field_add:frv.imageRequest.modelView)
}
inline const ::google::protobuf::RepeatedField< float >&
imageRequest::modelview() const {
  // @@protoc_insertion_point(field_list:frv.imageRequest.modelView)
  return modelview_;
}
inline ::google::protobuf::RepeatedField< float >*
imageRequest::mutable_modelview() {
  // @@protoc_insertion_point(field_mutable_list:frv.imageRequest.modelView)
  return &modelview_;
}

// repeated float projection = 2 [packed = true];
inline int imageRequest::projection_size() const {
  return projection_.size();
}
inline void imageRequest::clear_projection() {
  projection_.Clear();
}
inline float imageRequest::projection(int index) const {
  // @@protoc_insertion_point(field_get:frv.imageRequest.projection)
  return projection_.Get(index);
}
inline void imageRequest::set_projection(int index, float value) {
  projection_.Set(index, value);
  // @@protoc_insertion_point(field_set:frv.imageRequest.projection)
}
inline void imageRequest::add_projection(float value) {
  projection_.Add(value);
  // @@protoc_insertion_point(field_add:frv.imageRequest.projection)
}
inline const ::google::protobuf::RepeatedField< float >&
imageRequest::projection() const {
  // @@protoc_insertion_point(field_list:frv.imageRequest.projection)
  return projection_;
}
inline ::google::protobuf::RepeatedField< float >*
imageRequest::mutable_projection() {
  // @@protoc_insertion_point(field_mutable_list:frv.imageRequest.projection)
  return &projection_;
}

// optional float zScale = 3;
inline bool imageRequest::has_zscale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void imageRequest::set_has_zscale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void imageRequest::clear_has_zscale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void imageRequest::clear_zscale() {
  zscale_ = 0;
  clear_has_zscale();
}
inline float imageRequest::zscale() const {
  // @@protoc_insertion_point(field_get:frv.imageRequest.zScale)
  return zscale_;
}
inline void imageRequest::set_zscale(float value) {
  set_has_zscale();
  zscale_ = value;
  // @@protoc_insertion_point(field_set:frv.imageRequest.zScale)
}

// -------------------------------------------------------------------

// imageResponse

// required bytes image_bytes = 1;
inline bool imageResponse::has_image_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void imageResponse::set_has_image_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void imageResponse::clear_has_image_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void imageResponse::clear_image_bytes() {
  if (image_bytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_bytes_->clear();
  }
  clear_has_image_bytes();
}
inline const ::std::string& imageResponse::image_bytes() const {
  // @@protoc_insertion_point(field_get:frv.imageResponse.image_bytes)
  return *image_bytes_;
}
inline void imageResponse::set_image_bytes(const ::std::string& value) {
  set_has_image_bytes();
  if (image_bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_bytes_ = new ::std::string;
  }
  image_bytes_->assign(value);
  // @@protoc_insertion_point(field_set:frv.imageResponse.image_bytes)
}
inline void imageResponse::set_image_bytes(const char* value) {
  set_has_image_bytes();
  if (image_bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_bytes_ = new ::std::string;
  }
  image_bytes_->assign(value);
  // @@protoc_insertion_point(field_set_char:frv.imageResponse.image_bytes)
}
inline void imageResponse::set_image_bytes(const void* value, size_t size) {
  set_has_image_bytes();
  if (image_bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_bytes_ = new ::std::string;
  }
  image_bytes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:frv.imageResponse.image_bytes)
}
inline ::std::string* imageResponse::mutable_image_bytes() {
  set_has_image_bytes();
  if (image_bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_bytes_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:frv.imageResponse.image_bytes)
  return image_bytes_;
}
inline ::std::string* imageResponse::release_image_bytes() {
  clear_has_image_bytes();
  if (image_bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_bytes_;
    image_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void imageResponse::set_allocated_image_bytes(::std::string* image_bytes) {
  if (image_bytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_bytes_;
  }
  if (image_bytes) {
    set_has_image_bytes();
    image_bytes_ = image_bytes;
  } else {
    clear_has_image_bytes();
    image_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:frv.imageResponse.image_bytes)
}

// required string image_type = 2;
inline bool imageResponse::has_image_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void imageResponse::set_has_image_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void imageResponse::clear_has_image_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void imageResponse::clear_image_type() {
  if (image_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_type_->clear();
  }
  clear_has_image_type();
}
inline const ::std::string& imageResponse::image_type() const {
  // @@protoc_insertion_point(field_get:frv.imageResponse.image_type)
  return *image_type_;
}
inline void imageResponse::set_image_type(const ::std::string& value) {
  set_has_image_type();
  if (image_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_type_ = new ::std::string;
  }
  image_type_->assign(value);
  // @@protoc_insertion_point(field_set:frv.imageResponse.image_type)
}
inline void imageResponse::set_image_type(const char* value) {
  set_has_image_type();
  if (image_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_type_ = new ::std::string;
  }
  image_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:frv.imageResponse.image_type)
}
inline void imageResponse::set_image_type(const char* value, size_t size) {
  set_has_image_type();
  if (image_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_type_ = new ::std::string;
  }
  image_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:frv.imageResponse.image_type)
}
inline ::std::string* imageResponse::mutable_image_type() {
  set_has_image_type();
  if (image_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    image_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:frv.imageResponse.image_type)
  return image_type_;
}
inline ::std::string* imageResponse::release_image_type() {
  clear_has_image_type();
  if (image_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = image_type_;
    image_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void imageResponse::set_allocated_image_type(::std::string* image_type) {
  if (image_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_type_;
  }
  if (image_type) {
    set_has_image_type();
    image_type_ = image_type;
  } else {
    clear_has_image_type();
    image_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:frv.imageResponse.image_type)
}

// optional float zScale = 3;
inline bool imageResponse::has_zscale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void imageResponse::set_has_zscale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void imageResponse::clear_has_zscale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void imageResponse::clear_zscale() {
  zscale_ = 0;
  clear_has_zscale();
}
inline float imageResponse::zscale() const {
  // @@protoc_insertion_point(field_get:frv.imageResponse.zScale)
  return zscale_;
}
inline void imageResponse::set_zscale(float value) {
  set_has_zscale();
  zscale_ = value;
  // @@protoc_insertion_point(field_set:frv.imageResponse.zScale)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace frv

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FRVProtoBuffers_2eproto__INCLUDED
